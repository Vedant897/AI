graph = {
    'a': ['b', 'd'],
    'b': ['c', 'd'],
    'c': ['e', 'd'],
    'd': ['f'],
    'e': [],
    'f': []
}

visited = []
queue = []


def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)
    while queue:
        m = queue.pop(0)
        print(m, " ")
        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)
    print("Breadth First Search")


bfs(visited, graph, 'a')

visit = []


def dfs(visit, graph, node):
    if node not in visit:
        print(node)
        visit.append(node)
        for neighbour in graph[node]:
            if neighbour not in visit:
                dfs(visit, graph, neighbour)


print("Depth First Search")
dfs(visit, graph, 'a')
